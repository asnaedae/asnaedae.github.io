<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>debugging on Mike&#39;s ramblings</title>
    <link>https://dubdubdub.co.uk/tags/debugging/</link>
    <description>Recent content in debugging on Mike&#39;s ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Copyright notice</copyright>
    <lastBuildDate>Wed, 07 Jul 2010 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://dubdubdub.co.uk/tags/debugging/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>jmx and firewalls</title>
      <link>https://dubdubdub.co.uk/posts/2010-07-07-jmx-and-firewalls-or-how-to-hate-rmi-slightly-less/</link>
      <pubDate>Wed, 07 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>https://dubdubdub.co.uk/posts/2010-07-07-jmx-and-firewalls-or-how-to-hate-rmi-slightly-less/</guid>
      <description>So at least with Java 1.6 the JVM can use SOCKS for proxying RMI requests, so to get the wonderful jvisualvm (think 1.5 visualGC) working use the following incantations. This requires the initial RMI registry port is open to the client. First the initial SSH to server enabling the SOCKS tunnel
{% highlight bash %} $ ssh -D localhost:9696 servername {% endhighlight %}
And now for jvisualvm:
{% highlight bash %} $ jvisualvm</description>
    </item>
    
    <item>
      <title>searching java log files</title>
      <link>https://dubdubdub.co.uk/posts/2010-06-30-java-log-files/</link>
      <pubDate>Wed, 30 Jun 2010 00:00:00 +0000</pubDate>
      
      <guid>https://dubdubdub.co.uk/posts/2010-06-30-java-log-files/</guid>
      <description>So debugging java can be a mighty pain, a little few lines of ways to make it simpler.
# grep -m 1 -n &amp;#39;^2010-06-30 14:20:&amp;#39; catalina.out 11746233:2010-06-30 14:20:01,011 DEBUG com.beginning.of.line # grep -m 1 -n &amp;#39;^2010-06-30 14:21:&amp;#39; catalina.out 11747788:2010-06-30 14:21:00,161 WARN org.apache.commons.httpclient.HttpMethodBase - Going to buffer response body of large or unknown size. Using getResponseBodyAsStream instead is recommended # sed -n &amp;#39;11746233,11747788p&amp;#39; &amp;lt; catalina.out This gives start line and end line between any two greps and then the body of the log file from those two lines.</description>
    </item>
    
    <item>
      <title>smokeping and SOAP</title>
      <link>https://dubdubdub.co.uk/posts/2009-09-28-smokeping-and-measuring-soap-requests/</link>
      <pubDate>Mon, 28 Sep 2009 00:00:00 +0000</pubDate>
      
      <guid>https://dubdubdub.co.uk/posts/2009-09-28-smokeping-and-measuring-soap-requests/</guid>
      <description>We&amp;rsquo;ve had an issue with performance of a SOAP interface, and here&amp;rsquo;s how you go about setting up smokeping to time it:-
extraargs = -H Content-Type:text/xml --data @/srv/scripts/soap_check/soap-test.xml urlformat = http://server.name.com/url/soap_url The only annoying problem is that the SOAP payload cannot be included as part of the command line, so any slaves would require the file manually copied into the same location</description>
    </item>
    
    <item>
      <title>utf8 and mysql</title>
      <link>https://dubdubdub.co.uk/posts/2009-07-31-utf8-and-mysql-databases/</link>
      <pubDate>Fri, 31 Jul 2009 00:00:00 +0000</pubDate>
      
      <guid>https://dubdubdub.co.uk/posts/2009-07-31-utf8-and-mysql-databases/</guid>
      <description>Nice bugs that no one seems to want to fix:-
mysql&amp;gt; create table test5 ( wibble varchar(500), PRIMARY KEY (wibble) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin; ERROR 1071 (42000): Specified key was too long; max key length is 767 bytes mysql&amp;gt; create table test5 ( wibble varchar(500), PRIMARY KEY (wibble) ) ENGINE=myisam DEFAULT CHARSET=utf8 COLLATE=utf8_bin; ERROR 1071 (42000): Specified key was too long; max key length is 1332 bytes And even with MySQL 6.</description>
    </item>
    
    <item>
      <title>playing with TCP Trace</title>
      <link>https://dubdubdub.co.uk/posts/2008-09-29-playing-with-tcptrace-and-xplot/</link>
      <pubDate>Mon, 29 Sep 2008 00:00:00 +0000</pubDate>
      
      <guid>https://dubdubdub.co.uk/posts/2008-09-29-playing-with-tcptrace-and-xplot/</guid>
      <description># tcpdump -ni en0 port 80 -w output.trace # tcptrace -G output.trace # xplot *tput.xpl From the online manpage:
Yellow: instantaneous packets Red: Throughput for the last few packets Blue: Throughput since the start of the stream/connection
Other useful graphs:
 _owin.xpl - outstanding data/congestion _rtt.xpl - round trip time/time _ssize.xpl - segment size/time _tput.xpl - throughput/time _tsg.xpl - time sequence graph _tline.xpl - Timeline graph - W Richard Stevens style  Just some notes here so I don&amp;rsquo;t forget the basics - manual over at here</description>
    </item>
    
  </channel>
</rss>